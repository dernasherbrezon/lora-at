/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKUART_H
#define _MOCKUART_H

#include "unity.h"
#include "driver/uart.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void Mockuart_Init(void);
void Mockuart_Destroy(void);
void Mockuart_Verify(void);




#define uart_write_bytes_IgnoreAndReturn(cmock_retval) uart_write_bytes_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void uart_write_bytes_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define uart_write_bytes_StopIgnore() uart_write_bytes_CMockStopIgnore()
void uart_write_bytes_CMockStopIgnore(void);
#define uart_write_bytes_ExpectAnyArgsAndReturn(cmock_retval) uart_write_bytes_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void uart_write_bytes_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define uart_write_bytes_ExpectAndReturn(uart_num, src, size, cmock_retval) uart_write_bytes_CMockExpectAndReturn(__LINE__, uart_num, src, size, cmock_retval)
void uart_write_bytes_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uart_port_t uart_num, const void* src, size_t size, int cmock_to_return);
typedef int (* CMOCK_uart_write_bytes_CALLBACK)(uart_port_t uart_num, const void* src, size_t size, int cmock_num_calls);
void uart_write_bytes_AddCallback(CMOCK_uart_write_bytes_CALLBACK Callback);
void uart_write_bytes_Stub(CMOCK_uart_write_bytes_CALLBACK Callback);
#define uart_write_bytes_StubWithCallback uart_write_bytes_Stub
#define uart_write_bytes_ExpectWithArrayAndReturn(uart_num, src, src_Depth, size, cmock_retval) uart_write_bytes_CMockExpectWithArrayAndReturn(__LINE__, uart_num, src, src_Depth, size, cmock_retval)
void uart_write_bytes_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, uart_port_t uart_num, const void* src, int src_Depth, size_t size, int cmock_to_return);
#define uart_write_bytes_IgnoreArg_uart_num() uart_write_bytes_CMockIgnoreArg_uart_num(__LINE__)
void uart_write_bytes_CMockIgnoreArg_uart_num(UNITY_LINE_TYPE cmock_line);
#define uart_write_bytes_IgnoreArg_src() uart_write_bytes_CMockIgnoreArg_src(__LINE__)
void uart_write_bytes_CMockIgnoreArg_src(UNITY_LINE_TYPE cmock_line);
#define uart_write_bytes_IgnoreArg_size() uart_write_bytes_CMockIgnoreArg_size(__LINE__)
void uart_write_bytes_CMockIgnoreArg_size(UNITY_LINE_TYPE cmock_line);
#define uart_read_bytes_IgnoreAndReturn(cmock_retval) uart_read_bytes_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void uart_read_bytes_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define uart_read_bytes_StopIgnore() uart_read_bytes_CMockStopIgnore()
void uart_read_bytes_CMockStopIgnore(void);
#define uart_read_bytes_ExpectAnyArgsAndReturn(cmock_retval) uart_read_bytes_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void uart_read_bytes_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, int cmock_to_return);
#define uart_read_bytes_ExpectAndReturn(uart_num, buf, length, ticks_to_wait, cmock_retval) uart_read_bytes_CMockExpectAndReturn(__LINE__, uart_num, buf, length, ticks_to_wait, cmock_retval)
void uart_read_bytes_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uart_port_t uart_num, void* buf, uint32_t length, TickType_t ticks_to_wait, int cmock_to_return);
typedef int (* CMOCK_uart_read_bytes_CALLBACK)(uart_port_t uart_num, void* buf, uint32_t length, TickType_t ticks_to_wait, int cmock_num_calls);
void uart_read_bytes_AddCallback(CMOCK_uart_read_bytes_CALLBACK Callback);
void uart_read_bytes_Stub(CMOCK_uart_read_bytes_CALLBACK Callback);
#define uart_read_bytes_StubWithCallback uart_read_bytes_Stub
#define uart_read_bytes_ExpectWithArrayAndReturn(uart_num, buf, buf_Depth, length, ticks_to_wait, cmock_retval) uart_read_bytes_CMockExpectWithArrayAndReturn(__LINE__, uart_num, buf, buf_Depth, length, ticks_to_wait, cmock_retval)
void uart_read_bytes_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, uart_port_t uart_num, void* buf, int buf_Depth, uint32_t length, TickType_t ticks_to_wait, int cmock_to_return);
#define uart_read_bytes_ReturnThruPtr_buf(buf) uart_read_bytes_CMockReturnMemThruPtr_buf(__LINE__, buf, sizeof(void))
#define uart_read_bytes_ReturnArrayThruPtr_buf(buf, cmock_len) uart_read_bytes_CMockReturnMemThruPtr_buf(__LINE__, buf, (int)(cmock_len * (int)sizeof(*buf)))
#define uart_read_bytes_ReturnMemThruPtr_buf(buf, cmock_size) uart_read_bytes_CMockReturnMemThruPtr_buf(__LINE__, buf, cmock_size)
void uart_read_bytes_CMockReturnMemThruPtr_buf(UNITY_LINE_TYPE cmock_line, void* buf, int cmock_size);
#define uart_read_bytes_IgnoreArg_uart_num() uart_read_bytes_CMockIgnoreArg_uart_num(__LINE__)
void uart_read_bytes_CMockIgnoreArg_uart_num(UNITY_LINE_TYPE cmock_line);
#define uart_read_bytes_IgnoreArg_buf() uart_read_bytes_CMockIgnoreArg_buf(__LINE__)
void uart_read_bytes_CMockIgnoreArg_buf(UNITY_LINE_TYPE cmock_line);
#define uart_read_bytes_IgnoreArg_length() uart_read_bytes_CMockIgnoreArg_length(__LINE__)
void uart_read_bytes_CMockIgnoreArg_length(UNITY_LINE_TYPE cmock_line);
#define uart_read_bytes_IgnoreArg_ticks_to_wait() uart_read_bytes_CMockIgnoreArg_ticks_to_wait(__LINE__)
void uart_read_bytes_CMockIgnoreArg_ticks_to_wait(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
