/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKSX127X_UTIL_H
#define _MOCKSX127X_UTIL_H

#include "unity.h"
#include "sx127x_util.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void Mocksx127x_util_Init(void);
void Mocksx127x_util_Destroy(void);
void Mocksx127x_util_Verify(void);




#define lora_util_init_IgnoreAndReturn(cmock_retval) lora_util_init_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void lora_util_init_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define lora_util_init_StopIgnore() lora_util_init_CMockStopIgnore()
void lora_util_init_CMockStopIgnore(void);
#define lora_util_init_ExpectAnyArgsAndReturn(cmock_retval) lora_util_init_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void lora_util_init_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define lora_util_init_ExpectAndReturn(device, cmock_retval) lora_util_init_CMockExpectAndReturn(__LINE__, device, cmock_retval)
void lora_util_init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sx127x** device, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_lora_util_init_CALLBACK)(sx127x** device, int cmock_num_calls);
void lora_util_init_AddCallback(CMOCK_lora_util_init_CALLBACK Callback);
void lora_util_init_Stub(CMOCK_lora_util_init_CALLBACK Callback);
#define lora_util_init_StubWithCallback lora_util_init_Stub
#define lora_util_init_ExpectWithArrayAndReturn(device, device_Depth, cmock_retval) lora_util_init_CMockExpectWithArrayAndReturn(__LINE__, device, device_Depth, cmock_retval)
void lora_util_init_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sx127x** device, int device_Depth, esp_err_t cmock_to_return);
#define lora_util_init_ReturnThruPtr_device(device) lora_util_init_CMockReturnMemThruPtr_device(__LINE__, device, sizeof(sx127x*))
#define lora_util_init_ReturnArrayThruPtr_device(device, cmock_len) lora_util_init_CMockReturnMemThruPtr_device(__LINE__, device, (int)(cmock_len * (int)sizeof(*device)))
#define lora_util_init_ReturnMemThruPtr_device(device, cmock_size) lora_util_init_CMockReturnMemThruPtr_device(__LINE__, device, cmock_size)
void lora_util_init_CMockReturnMemThruPtr_device(UNITY_LINE_TYPE cmock_line, sx127x** device, int cmock_size);
#define lora_util_init_IgnoreArg_device() lora_util_init_CMockIgnoreArg_device(__LINE__)
void lora_util_init_CMockIgnoreArg_device(UNITY_LINE_TYPE cmock_line);
#define lora_util_read_frame_IgnoreAndReturn(cmock_retval) lora_util_read_frame_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void lora_util_read_frame_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define lora_util_read_frame_StopIgnore() lora_util_read_frame_CMockStopIgnore()
void lora_util_read_frame_CMockStopIgnore(void);
#define lora_util_read_frame_ExpectAnyArgsAndReturn(cmock_retval) lora_util_read_frame_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void lora_util_read_frame_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define lora_util_read_frame_ExpectAndReturn(device, data, data_length, result, cmock_retval) lora_util_read_frame_CMockExpectAndReturn(__LINE__, device, data, data_length, result, cmock_retval)
void lora_util_read_frame_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, sx127x* device, uint8_t* data, uint16_t data_length, lora_frame_t** result, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_lora_util_read_frame_CALLBACK)(sx127x* device, uint8_t* data, uint16_t data_length, lora_frame_t** result, int cmock_num_calls);
void lora_util_read_frame_AddCallback(CMOCK_lora_util_read_frame_CALLBACK Callback);
void lora_util_read_frame_Stub(CMOCK_lora_util_read_frame_CALLBACK Callback);
#define lora_util_read_frame_StubWithCallback lora_util_read_frame_Stub
#define lora_util_read_frame_ExpectWithArrayAndReturn(device, device_Depth, data, data_Depth, data_length, result, result_Depth, cmock_retval) lora_util_read_frame_CMockExpectWithArrayAndReturn(__LINE__, device, device_Depth, data, data_Depth, data_length, result, result_Depth, cmock_retval)
void lora_util_read_frame_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, sx127x* device, int device_Depth, uint8_t* data, int data_Depth, uint16_t data_length, lora_frame_t** result, int result_Depth, esp_err_t cmock_to_return);
#define lora_util_read_frame_ReturnThruPtr_device(device) lora_util_read_frame_CMockReturnMemThruPtr_device(__LINE__, device, sizeof(sx127x))
#define lora_util_read_frame_ReturnArrayThruPtr_device(device, cmock_len) lora_util_read_frame_CMockReturnMemThruPtr_device(__LINE__, device, (int)(cmock_len * (int)sizeof(*device)))
#define lora_util_read_frame_ReturnMemThruPtr_device(device, cmock_size) lora_util_read_frame_CMockReturnMemThruPtr_device(__LINE__, device, cmock_size)
void lora_util_read_frame_CMockReturnMemThruPtr_device(UNITY_LINE_TYPE cmock_line, sx127x* device, int cmock_size);
#define lora_util_read_frame_ReturnThruPtr_data(data) lora_util_read_frame_CMockReturnMemThruPtr_data(__LINE__, data, sizeof(uint8_t))
#define lora_util_read_frame_ReturnArrayThruPtr_data(data, cmock_len) lora_util_read_frame_CMockReturnMemThruPtr_data(__LINE__, data, (int)(cmock_len * (int)sizeof(*data)))
#define lora_util_read_frame_ReturnMemThruPtr_data(data, cmock_size) lora_util_read_frame_CMockReturnMemThruPtr_data(__LINE__, data, cmock_size)
void lora_util_read_frame_CMockReturnMemThruPtr_data(UNITY_LINE_TYPE cmock_line, uint8_t* data, int cmock_size);
#define lora_util_read_frame_ReturnThruPtr_result(result) lora_util_read_frame_CMockReturnMemThruPtr_result(__LINE__, result, sizeof(lora_frame_t*))
#define lora_util_read_frame_ReturnArrayThruPtr_result(result, cmock_len) lora_util_read_frame_CMockReturnMemThruPtr_result(__LINE__, result, (int)(cmock_len * (int)sizeof(*result)))
#define lora_util_read_frame_ReturnMemThruPtr_result(result, cmock_size) lora_util_read_frame_CMockReturnMemThruPtr_result(__LINE__, result, cmock_size)
void lora_util_read_frame_CMockReturnMemThruPtr_result(UNITY_LINE_TYPE cmock_line, lora_frame_t** result, int cmock_size);
#define lora_util_read_frame_IgnoreArg_device() lora_util_read_frame_CMockIgnoreArg_device(__LINE__)
void lora_util_read_frame_CMockIgnoreArg_device(UNITY_LINE_TYPE cmock_line);
#define lora_util_read_frame_IgnoreArg_data() lora_util_read_frame_CMockIgnoreArg_data(__LINE__)
void lora_util_read_frame_CMockIgnoreArg_data(UNITY_LINE_TYPE cmock_line);
#define lora_util_read_frame_IgnoreArg_data_length() lora_util_read_frame_CMockIgnoreArg_data_length(__LINE__)
void lora_util_read_frame_CMockIgnoreArg_data_length(UNITY_LINE_TYPE cmock_line);
#define lora_util_read_frame_IgnoreArg_result() lora_util_read_frame_CMockIgnoreArg_result(__LINE__)
void lora_util_read_frame_CMockIgnoreArg_result(UNITY_LINE_TYPE cmock_line);
#define lora_util_start_rx_IgnoreAndReturn(cmock_retval) lora_util_start_rx_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void lora_util_start_rx_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define lora_util_start_rx_StopIgnore() lora_util_start_rx_CMockStopIgnore()
void lora_util_start_rx_CMockStopIgnore(void);
#define lora_util_start_rx_ExpectAnyArgsAndReturn(cmock_retval) lora_util_start_rx_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void lora_util_start_rx_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define lora_util_start_rx_ExpectAndReturn(req, device, cmock_retval) lora_util_start_rx_CMockExpectAndReturn(__LINE__, req, device, cmock_retval)
void lora_util_start_rx_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, rx_request_t* req, sx127x* device, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_lora_util_start_rx_CALLBACK)(rx_request_t* req, sx127x* device, int cmock_num_calls);
void lora_util_start_rx_AddCallback(CMOCK_lora_util_start_rx_CALLBACK Callback);
void lora_util_start_rx_Stub(CMOCK_lora_util_start_rx_CALLBACK Callback);
#define lora_util_start_rx_StubWithCallback lora_util_start_rx_Stub
#define lora_util_start_rx_ExpectWithArrayAndReturn(req, req_Depth, device, device_Depth, cmock_retval) lora_util_start_rx_CMockExpectWithArrayAndReturn(__LINE__, req, req_Depth, device, device_Depth, cmock_retval)
void lora_util_start_rx_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, rx_request_t* req, int req_Depth, sx127x* device, int device_Depth, esp_err_t cmock_to_return);
#define lora_util_start_rx_ReturnThruPtr_req(req) lora_util_start_rx_CMockReturnMemThruPtr_req(__LINE__, req, sizeof(rx_request_t))
#define lora_util_start_rx_ReturnArrayThruPtr_req(req, cmock_len) lora_util_start_rx_CMockReturnMemThruPtr_req(__LINE__, req, (int)(cmock_len * (int)sizeof(*req)))
#define lora_util_start_rx_ReturnMemThruPtr_req(req, cmock_size) lora_util_start_rx_CMockReturnMemThruPtr_req(__LINE__, req, cmock_size)
void lora_util_start_rx_CMockReturnMemThruPtr_req(UNITY_LINE_TYPE cmock_line, rx_request_t* req, int cmock_size);
#define lora_util_start_rx_ReturnThruPtr_device(device) lora_util_start_rx_CMockReturnMemThruPtr_device(__LINE__, device, sizeof(sx127x))
#define lora_util_start_rx_ReturnArrayThruPtr_device(device, cmock_len) lora_util_start_rx_CMockReturnMemThruPtr_device(__LINE__, device, (int)(cmock_len * (int)sizeof(*device)))
#define lora_util_start_rx_ReturnMemThruPtr_device(device, cmock_size) lora_util_start_rx_CMockReturnMemThruPtr_device(__LINE__, device, cmock_size)
void lora_util_start_rx_CMockReturnMemThruPtr_device(UNITY_LINE_TYPE cmock_line, sx127x* device, int cmock_size);
#define lora_util_start_rx_IgnoreArg_req() lora_util_start_rx_CMockIgnoreArg_req(__LINE__)
void lora_util_start_rx_CMockIgnoreArg_req(UNITY_LINE_TYPE cmock_line);
#define lora_util_start_rx_IgnoreArg_device() lora_util_start_rx_CMockIgnoreArg_device(__LINE__)
void lora_util_start_rx_CMockIgnoreArg_device(UNITY_LINE_TYPE cmock_line);
#define lora_util_start_tx_IgnoreAndReturn(cmock_retval) lora_util_start_tx_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void lora_util_start_tx_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define lora_util_start_tx_StopIgnore() lora_util_start_tx_CMockStopIgnore()
void lora_util_start_tx_CMockStopIgnore(void);
#define lora_util_start_tx_ExpectAnyArgsAndReturn(cmock_retval) lora_util_start_tx_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void lora_util_start_tx_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define lora_util_start_tx_ExpectAndReturn(data, data_length, req, device, cmock_retval) lora_util_start_tx_CMockExpectAndReturn(__LINE__, data, data_length, req, device, cmock_retval)
void lora_util_start_tx_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t* data, size_t data_length, rx_request_t* req, sx127x* device, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_lora_util_start_tx_CALLBACK)(uint8_t* data, size_t data_length, rx_request_t* req, sx127x* device, int cmock_num_calls);
void lora_util_start_tx_AddCallback(CMOCK_lora_util_start_tx_CALLBACK Callback);
void lora_util_start_tx_Stub(CMOCK_lora_util_start_tx_CALLBACK Callback);
#define lora_util_start_tx_StubWithCallback lora_util_start_tx_Stub
#define lora_util_start_tx_ExpectWithArrayAndReturn(data, data_Depth, data_length, req, req_Depth, device, device_Depth, cmock_retval) lora_util_start_tx_CMockExpectWithArrayAndReturn(__LINE__, data, data_Depth, data_length, req, req_Depth, device, device_Depth, cmock_retval)
void lora_util_start_tx_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t* data, int data_Depth, size_t data_length, rx_request_t* req, int req_Depth, sx127x* device, int device_Depth, esp_err_t cmock_to_return);
#define lora_util_start_tx_ReturnThruPtr_data(data) lora_util_start_tx_CMockReturnMemThruPtr_data(__LINE__, data, sizeof(uint8_t))
#define lora_util_start_tx_ReturnArrayThruPtr_data(data, cmock_len) lora_util_start_tx_CMockReturnMemThruPtr_data(__LINE__, data, (int)(cmock_len * (int)sizeof(*data)))
#define lora_util_start_tx_ReturnMemThruPtr_data(data, cmock_size) lora_util_start_tx_CMockReturnMemThruPtr_data(__LINE__, data, cmock_size)
void lora_util_start_tx_CMockReturnMemThruPtr_data(UNITY_LINE_TYPE cmock_line, uint8_t* data, int cmock_size);
#define lora_util_start_tx_ReturnThruPtr_req(req) lora_util_start_tx_CMockReturnMemThruPtr_req(__LINE__, req, sizeof(rx_request_t))
#define lora_util_start_tx_ReturnArrayThruPtr_req(req, cmock_len) lora_util_start_tx_CMockReturnMemThruPtr_req(__LINE__, req, (int)(cmock_len * (int)sizeof(*req)))
#define lora_util_start_tx_ReturnMemThruPtr_req(req, cmock_size) lora_util_start_tx_CMockReturnMemThruPtr_req(__LINE__, req, cmock_size)
void lora_util_start_tx_CMockReturnMemThruPtr_req(UNITY_LINE_TYPE cmock_line, rx_request_t* req, int cmock_size);
#define lora_util_start_tx_ReturnThruPtr_device(device) lora_util_start_tx_CMockReturnMemThruPtr_device(__LINE__, device, sizeof(sx127x))
#define lora_util_start_tx_ReturnArrayThruPtr_device(device, cmock_len) lora_util_start_tx_CMockReturnMemThruPtr_device(__LINE__, device, (int)(cmock_len * (int)sizeof(*device)))
#define lora_util_start_tx_ReturnMemThruPtr_device(device, cmock_size) lora_util_start_tx_CMockReturnMemThruPtr_device(__LINE__, device, cmock_size)
void lora_util_start_tx_CMockReturnMemThruPtr_device(UNITY_LINE_TYPE cmock_line, sx127x* device, int cmock_size);
#define lora_util_start_tx_IgnoreArg_data() lora_util_start_tx_CMockIgnoreArg_data(__LINE__)
void lora_util_start_tx_CMockIgnoreArg_data(UNITY_LINE_TYPE cmock_line);
#define lora_util_start_tx_IgnoreArg_data_length() lora_util_start_tx_CMockIgnoreArg_data_length(__LINE__)
void lora_util_start_tx_CMockIgnoreArg_data_length(UNITY_LINE_TYPE cmock_line);
#define lora_util_start_tx_IgnoreArg_req() lora_util_start_tx_CMockIgnoreArg_req(__LINE__)
void lora_util_start_tx_CMockIgnoreArg_req(UNITY_LINE_TYPE cmock_line);
#define lora_util_start_tx_IgnoreArg_device() lora_util_start_tx_CMockIgnoreArg_device(__LINE__)
void lora_util_start_tx_CMockIgnoreArg_device(UNITY_LINE_TYPE cmock_line);
#define lora_util_frame_destroy_Ignore() lora_util_frame_destroy_CMockIgnore()
void lora_util_frame_destroy_CMockIgnore(void);
#define lora_util_frame_destroy_StopIgnore() lora_util_frame_destroy_CMockStopIgnore()
void lora_util_frame_destroy_CMockStopIgnore(void);
#define lora_util_frame_destroy_ExpectAnyArgs() lora_util_frame_destroy_CMockExpectAnyArgs(__LINE__)
void lora_util_frame_destroy_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define lora_util_frame_destroy_Expect(frame) lora_util_frame_destroy_CMockExpect(__LINE__, frame)
void lora_util_frame_destroy_CMockExpect(UNITY_LINE_TYPE cmock_line, lora_frame_t* frame);
typedef void (* CMOCK_lora_util_frame_destroy_CALLBACK)(lora_frame_t* frame, int cmock_num_calls);
void lora_util_frame_destroy_AddCallback(CMOCK_lora_util_frame_destroy_CALLBACK Callback);
void lora_util_frame_destroy_Stub(CMOCK_lora_util_frame_destroy_CALLBACK Callback);
#define lora_util_frame_destroy_StubWithCallback lora_util_frame_destroy_Stub
#define lora_util_frame_destroy_ExpectWithArray(frame, frame_Depth) lora_util_frame_destroy_CMockExpectWithArray(__LINE__, frame, frame_Depth)
void lora_util_frame_destroy_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, lora_frame_t* frame, int frame_Depth);
#define lora_util_frame_destroy_ReturnThruPtr_frame(frame) lora_util_frame_destroy_CMockReturnMemThruPtr_frame(__LINE__, frame, sizeof(lora_frame_t))
#define lora_util_frame_destroy_ReturnArrayThruPtr_frame(frame, cmock_len) lora_util_frame_destroy_CMockReturnMemThruPtr_frame(__LINE__, frame, (int)(cmock_len * (int)sizeof(*frame)))
#define lora_util_frame_destroy_ReturnMemThruPtr_frame(frame, cmock_size) lora_util_frame_destroy_CMockReturnMemThruPtr_frame(__LINE__, frame, cmock_size)
void lora_util_frame_destroy_CMockReturnMemThruPtr_frame(UNITY_LINE_TYPE cmock_line, lora_frame_t* frame, int cmock_size);
#define lora_util_frame_destroy_IgnoreArg_frame() lora_util_frame_destroy_CMockIgnoreArg_frame(__LINE__)
void lora_util_frame_destroy_CMockIgnoreArg_frame(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
