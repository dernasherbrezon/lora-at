/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKBLE_CLIENT_H
#define _MOCKBLE_CLIENT_H

#include "unity.h"
#include "ble_client.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void Mockble_client_Init(void);
void Mockble_client_Destroy(void);
void Mockble_client_Verify(void);




#define ble_client_create_IgnoreAndReturn(cmock_retval) ble_client_create_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ble_client_create_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define ble_client_create_StopIgnore() ble_client_create_CMockStopIgnore()
void ble_client_create_CMockStopIgnore(void);
#define ble_client_create_ExpectAnyArgsAndReturn(cmock_retval) ble_client_create_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void ble_client_create_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define ble_client_create_ExpectAndReturn(app_id, client, cmock_retval) ble_client_create_CMockExpectAndReturn(__LINE__, app_id, client, cmock_retval)
void ble_client_create_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint16_t app_id, ble_client** client, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_ble_client_create_CALLBACK)(uint16_t app_id, ble_client** client, int cmock_num_calls);
void ble_client_create_AddCallback(CMOCK_ble_client_create_CALLBACK Callback);
void ble_client_create_Stub(CMOCK_ble_client_create_CALLBACK Callback);
#define ble_client_create_StubWithCallback ble_client_create_Stub
#define ble_client_create_ExpectWithArrayAndReturn(app_id, client, client_Depth, cmock_retval) ble_client_create_CMockExpectWithArrayAndReturn(__LINE__, app_id, client, client_Depth, cmock_retval)
void ble_client_create_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, uint16_t app_id, ble_client** client, int client_Depth, esp_err_t cmock_to_return);
#define ble_client_create_ReturnThruPtr_client(client) ble_client_create_CMockReturnMemThruPtr_client(__LINE__, client, sizeof(ble_client*))
#define ble_client_create_ReturnArrayThruPtr_client(client, cmock_len) ble_client_create_CMockReturnMemThruPtr_client(__LINE__, client, (int)(cmock_len * (int)sizeof(*client)))
#define ble_client_create_ReturnMemThruPtr_client(client, cmock_size) ble_client_create_CMockReturnMemThruPtr_client(__LINE__, client, cmock_size)
void ble_client_create_CMockReturnMemThruPtr_client(UNITY_LINE_TYPE cmock_line, ble_client** client, int cmock_size);
#define ble_client_create_IgnoreArg_app_id() ble_client_create_CMockIgnoreArg_app_id(__LINE__)
void ble_client_create_CMockIgnoreArg_app_id(UNITY_LINE_TYPE cmock_line);
#define ble_client_create_IgnoreArg_client() ble_client_create_CMockIgnoreArg_client(__LINE__)
void ble_client_create_CMockIgnoreArg_client(UNITY_LINE_TYPE cmock_line);
#define ble_client_connect_IgnoreAndReturn(cmock_retval) ble_client_connect_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void ble_client_connect_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define ble_client_connect_StopIgnore() ble_client_connect_CMockStopIgnore()
void ble_client_connect_CMockStopIgnore(void);
#define ble_client_connect_ExpectAnyArgsAndReturn(cmock_retval) ble_client_connect_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void ble_client_connect_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, esp_err_t cmock_to_return);
#define ble_client_connect_ExpectAndReturn(address, client, cmock_retval) ble_client_connect_CMockExpectAndReturn(__LINE__, address, client, cmock_retval)
void ble_client_connect_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t* address, ble_client* client, esp_err_t cmock_to_return);
typedef esp_err_t (* CMOCK_ble_client_connect_CALLBACK)(uint8_t* address, ble_client* client, int cmock_num_calls);
void ble_client_connect_AddCallback(CMOCK_ble_client_connect_CALLBACK Callback);
void ble_client_connect_Stub(CMOCK_ble_client_connect_CALLBACK Callback);
#define ble_client_connect_StubWithCallback ble_client_connect_Stub
#define ble_client_connect_ExpectWithArrayAndReturn(address, address_Depth, client, client_Depth, cmock_retval) ble_client_connect_CMockExpectWithArrayAndReturn(__LINE__, address, address_Depth, client, client_Depth, cmock_retval)
void ble_client_connect_CMockExpectWithArrayAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t* address, int address_Depth, ble_client* client, int client_Depth, esp_err_t cmock_to_return);
#define ble_client_connect_ReturnThruPtr_address(address) ble_client_connect_CMockReturnMemThruPtr_address(__LINE__, address, sizeof(uint8_t))
#define ble_client_connect_ReturnArrayThruPtr_address(address, cmock_len) ble_client_connect_CMockReturnMemThruPtr_address(__LINE__, address, (int)(cmock_len * (int)sizeof(*address)))
#define ble_client_connect_ReturnMemThruPtr_address(address, cmock_size) ble_client_connect_CMockReturnMemThruPtr_address(__LINE__, address, cmock_size)
void ble_client_connect_CMockReturnMemThruPtr_address(UNITY_LINE_TYPE cmock_line, uint8_t* address, int cmock_size);
#define ble_client_connect_ReturnThruPtr_client(client) ble_client_connect_CMockReturnMemThruPtr_client(__LINE__, client, sizeof(ble_client))
#define ble_client_connect_ReturnArrayThruPtr_client(client, cmock_len) ble_client_connect_CMockReturnMemThruPtr_client(__LINE__, client, (int)(cmock_len * (int)sizeof(*client)))
#define ble_client_connect_ReturnMemThruPtr_client(client, cmock_size) ble_client_connect_CMockReturnMemThruPtr_client(__LINE__, client, cmock_size)
void ble_client_connect_CMockReturnMemThruPtr_client(UNITY_LINE_TYPE cmock_line, ble_client* client, int cmock_size);
#define ble_client_connect_IgnoreArg_address() ble_client_connect_CMockIgnoreArg_address(__LINE__)
void ble_client_connect_CMockIgnoreArg_address(UNITY_LINE_TYPE cmock_line);
#define ble_client_connect_IgnoreArg_client() ble_client_connect_CMockIgnoreArg_client(__LINE__)
void ble_client_connect_CMockIgnoreArg_client(UNITY_LINE_TYPE cmock_line);
#define ble_client_destroy_Ignore() ble_client_destroy_CMockIgnore()
void ble_client_destroy_CMockIgnore(void);
#define ble_client_destroy_StopIgnore() ble_client_destroy_CMockStopIgnore()
void ble_client_destroy_CMockStopIgnore(void);
#define ble_client_destroy_ExpectAnyArgs() ble_client_destroy_CMockExpectAnyArgs(__LINE__)
void ble_client_destroy_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define ble_client_destroy_Expect(client) ble_client_destroy_CMockExpect(__LINE__, client)
void ble_client_destroy_CMockExpect(UNITY_LINE_TYPE cmock_line, ble_client* client);
typedef void (* CMOCK_ble_client_destroy_CALLBACK)(ble_client* client, int cmock_num_calls);
void ble_client_destroy_AddCallback(CMOCK_ble_client_destroy_CALLBACK Callback);
void ble_client_destroy_Stub(CMOCK_ble_client_destroy_CALLBACK Callback);
#define ble_client_destroy_StubWithCallback ble_client_destroy_Stub
#define ble_client_destroy_ExpectWithArray(client, client_Depth) ble_client_destroy_CMockExpectWithArray(__LINE__, client, client_Depth)
void ble_client_destroy_CMockExpectWithArray(UNITY_LINE_TYPE cmock_line, ble_client* client, int client_Depth);
#define ble_client_destroy_ReturnThruPtr_client(client) ble_client_destroy_CMockReturnMemThruPtr_client(__LINE__, client, sizeof(ble_client))
#define ble_client_destroy_ReturnArrayThruPtr_client(client, cmock_len) ble_client_destroy_CMockReturnMemThruPtr_client(__LINE__, client, (int)(cmock_len * (int)sizeof(*client)))
#define ble_client_destroy_ReturnMemThruPtr_client(client, cmock_size) ble_client_destroy_CMockReturnMemThruPtr_client(__LINE__, client, cmock_size)
void ble_client_destroy_CMockReturnMemThruPtr_client(UNITY_LINE_TYPE cmock_line, ble_client* client, int cmock_size);
#define ble_client_destroy_IgnoreArg_client() ble_client_destroy_CMockIgnoreArg_client(__LINE__)
void ble_client_destroy_CMockIgnoreArg_client(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
